// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TherapyDashboard.Models;

namespace TherapyDashboard.Migrations
{
    [DbContext(typeof(TherapyDashboardContext))]
    [Migration("20190217000336_ComplexDataModel")]
    partial class ComplexDataModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstTimePassword");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("RequirePasswordResetOnNextLogin");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentEditId");

                    b.Property<int?>("AssessmentId");

                    b.Property<int>("Number");

                    b.Property<int>("Response");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentEditId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentType");

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ConductedBy")
                        .IsRequired();

                    b.Property<DateTime>("ConductedOn");

                    b.Property<int>("EnrollmentId");

                    b.Property<int>("Score");

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.AssessmentEdit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentId");

                    b.Property<string>("ConductedBy")
                        .IsRequired();

                    b.Property<DateTime>("ConductedOn");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentEdits");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Client", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("PartnerGenderId");

                    b.Property<string>("RelationshipStatus")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PartnerGenderId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.ClientTag", b =>
                {
                    b.Property<string>("ClientId");

                    b.Property<int>("TagId");

                    b.HasKey("ClientId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ClientTags");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId");

                    b.Property<string>("ParticipatingIn");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TagType");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Answer", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.AssessmentEdit")
                        .WithMany("ChangedAnswers")
                        .HasForeignKey("AssessmentEditId");

                    b.HasOne("TherapyDashboard.Models.Database.Assessment")
                        .WithMany("Answers")
                        .HasForeignKey("AssessmentId");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Assessment", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Enrollment", "Enrollment")
                        .WithMany("Assessments")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.AssessmentEdit", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Assessment", "Assessment")
                        .WithMany("Edits")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Client", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Tag", "PartnerGender")
                        .WithMany()
                        .HasForeignKey("PartnerGenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.ClientTag", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Client", "Client")
                        .WithMany("ClientTag")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TherapyDashboard.Models.Database.Tag", "Tag")
                        .WithMany("ClientTag")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Enrollment", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Client", "Client")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClientId");
                });
#pragma warning restore 612, 618
        }
    }
}
