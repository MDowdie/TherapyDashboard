// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TherapyDashboard.Models;

namespace TherapyDashboard.Migrations
{
    [DbContext(typeof(TherapyDashboardContext))]
    partial class TherapyDashboardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstTimePassword");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("RequirePasswordResetOnNextLogin");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.CFARSAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1");

                    b.Property<string>("Answer10");

                    b.Property<string>("Answer11");

                    b.Property<string>("Answer12");

                    b.Property<string>("Answer13");

                    b.Property<string>("Answer14");

                    b.Property<string>("Answer15");

                    b.Property<string>("Answer16");

                    b.Property<string>("Answer17");

                    b.Property<string>("Answer18");

                    b.Property<string>("Answer19");

                    b.Property<string>("Answer2");

                    b.Property<string>("Answer20");

                    b.Property<string>("Answer21");

                    b.Property<string>("Answer22");

                    b.Property<string>("Answer23");

                    b.Property<string>("Answer24");

                    b.Property<string>("Answer25");

                    b.Property<string>("Answer26");

                    b.Property<string>("Answer27");

                    b.Property<string>("Answer28");

                    b.Property<string>("Answer29");

                    b.Property<string>("Answer3");

                    b.Property<string>("Answer30");

                    b.Property<string>("Answer31");

                    b.Property<string>("Answer32");

                    b.Property<string>("Answer33");

                    b.Property<string>("Answer34");

                    b.Property<string>("Answer35");

                    b.Property<string>("Answer36");

                    b.Property<string>("Answer37");

                    b.Property<string>("Answer38");

                    b.Property<string>("Answer39");

                    b.Property<string>("Answer4");

                    b.Property<string>("Answer40");

                    b.Property<string>("Answer41");

                    b.Property<string>("Answer42");

                    b.Property<string>("Answer43");

                    b.Property<string>("Answer44");

                    b.Property<string>("Answer45");

                    b.Property<string>("Answer46");

                    b.Property<string>("Answer47");

                    b.Property<string>("Answer48");

                    b.Property<string>("Answer49");

                    b.Property<string>("Answer5");

                    b.Property<string>("Answer50");

                    b.Property<string>("Answer51");

                    b.Property<string>("Answer52");

                    b.Property<string>("Answer53");

                    b.Property<string>("Answer54");

                    b.Property<string>("Answer55");

                    b.Property<string>("Answer56");

                    b.Property<string>("Answer57");

                    b.Property<string>("Answer58");

                    b.Property<string>("Answer59");

                    b.Property<string>("Answer6");

                    b.Property<string>("Answer60");

                    b.Property<string>("Answer61");

                    b.Property<string>("Answer62");

                    b.Property<string>("Answer63");

                    b.Property<string>("Answer64");

                    b.Property<string>("Answer65");

                    b.Property<string>("Answer66");

                    b.Property<string>("Answer67");

                    b.Property<string>("Answer68");

                    b.Property<string>("Answer69");

                    b.Property<string>("Answer7");

                    b.Property<string>("Answer70");

                    b.Property<string>("Answer71");

                    b.Property<string>("Answer72");

                    b.Property<string>("Answer8");

                    b.Property<string>("Answer9");

                    b.Property<string>("ClientID");

                    b.Property<DateTime>("ConductDate");

                    b.Property<int>("EnrollmentID");

                    b.Property<int>("ParentAssessmentID");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.HasIndex("EnrollmentID");

                    b.ToTable("CFARSAssessments");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Client", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Ethnicity");

                    b.Property<string>("Gender");

                    b.Property<string>("PartnerGender");

                    b.Property<string>("Race");

                    b.Property<string>("RelationshipStatus");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientForeignKey");

                    b.Property<string>("ClientId");

                    b.Property<DateTime>("End");

                    b.Property<string>("ParticipatingIn");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ClientForeignKey");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.PCLAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1");

                    b.Property<string>("Answer10");

                    b.Property<string>("Answer11");

                    b.Property<string>("Answer12");

                    b.Property<string>("Answer13");

                    b.Property<string>("Answer14");

                    b.Property<string>("Answer15");

                    b.Property<string>("Answer16");

                    b.Property<string>("Answer17");

                    b.Property<string>("Answer18");

                    b.Property<string>("Answer19");

                    b.Property<string>("Answer2");

                    b.Property<string>("Answer20");

                    b.Property<string>("Answer3");

                    b.Property<string>("Answer4");

                    b.Property<string>("Answer5");

                    b.Property<string>("Answer6");

                    b.Property<string>("Answer7");

                    b.Property<string>("Answer8");

                    b.Property<string>("Answer9");

                    b.Property<string>("ClientID");

                    b.Property<DateTime>("ConductDate");

                    b.Property<int>("EnrollmentID");

                    b.Property<int>("ParentAssessmentID");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.HasIndex("EnrollmentID");

                    b.ToTable("PCLAssessments");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.PPSRAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1");

                    b.Property<string>("Answer10");

                    b.Property<string>("Answer11");

                    b.Property<string>("Answer12");

                    b.Property<string>("Answer13");

                    b.Property<string>("Answer14");

                    b.Property<string>("Answer15");

                    b.Property<string>("Answer16");

                    b.Property<string>("Answer17");

                    b.Property<string>("Answer18");

                    b.Property<string>("Answer19");

                    b.Property<string>("Answer2");

                    b.Property<string>("Answer20");

                    b.Property<string>("Answer21");

                    b.Property<string>("Answer22");

                    b.Property<string>("Answer23");

                    b.Property<string>("Answer24");

                    b.Property<string>("Answer25");

                    b.Property<string>("Answer26");

                    b.Property<string>("Answer27");

                    b.Property<string>("Answer28");

                    b.Property<string>("Answer3");

                    b.Property<string>("Answer4");

                    b.Property<string>("Answer5");

                    b.Property<string>("Answer6");

                    b.Property<string>("Answer7");

                    b.Property<string>("Answer8");

                    b.Property<string>("Answer9");

                    b.Property<string>("ClientID");

                    b.Property<DateTime>("ConductDate");

                    b.Property<int>("EnrollmentID");

                    b.Property<int>("ParentAssessmentID");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.HasIndex("EnrollmentID");

                    b.ToTable("PPSRAssessments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TherapyDashboard.Areas.Identity.Data.TherapyDashboardUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.CFARSAssessment", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("TherapyDashboard.Models.Database.Enrollment", "Enrollment")
                        .WithMany("CFARSAssessments")
                        .HasForeignKey("EnrollmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.Enrollment", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Client", "Client")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClientForeignKey");
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.PCLAssessment", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("TherapyDashboard.Models.Database.Enrollment", "Enrollment")
                        .WithMany("PCLAssessments")
                        .HasForeignKey("EnrollmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyDashboard.Models.Database.PPSRAssessment", b =>
                {
                    b.HasOne("TherapyDashboard.Models.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("TherapyDashboard.Models.Database.Enrollment", "Enrollment")
                        .WithMany("PPSRAssessments")
                        .HasForeignKey("EnrollmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
